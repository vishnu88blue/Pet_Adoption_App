import type { Clerk } from '../../core/resources/internal';
export declare class CaptchaChallenge {
    private clerk;
    constructor(clerk: Clerk);
    /**
     * Triggers an invisible challenge.
     * This will always use the non-interactive variant of the CAPTCHA challenge and will
     * always use the fallback key.
     */
    invisible(): Promise<{
        captchaToken: string;
        captchaWidgetType: import("@clerk/types").CaptchaWidgetType;
    } | {
        captchaError: any;
    } | undefined>;
    /**
     * Triggers a smart challenge if the user is required to solve a CAPTCHA.
     * Depending on the environment settings, this will either trigger an
     * invisible or smart (managed) CAPTCHA challenge.
     * Managed challenged start as non-interactive and escalate to interactive if necessary.
     * Important: For this to work at the moment, the instance needs to be using SMART protection
     * as we need both keys (visible and invisible) to be present.
     */
    managed(): Promise<{} | undefined>;
}
