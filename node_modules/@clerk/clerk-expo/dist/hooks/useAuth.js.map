{"version":3,"sources":["../../src/hooks/useAuth.ts"],"sourcesContent":["import { useAuth as useAuthBase } from '@clerk/clerk-react';\nimport { isNetworkError } from '@clerk/shared/error';\nimport type { GetToken, GetTokenOptions, UseAuthReturn } from '@clerk/types';\n\nimport { SessionJWTCache } from '../cache';\n\n/*\n * This hook extends the useAuth hook to add experimental JWT caching.\n * The caching is used only when no options are passed to getToken.\n */\nexport const useAuth = (initialAuthState?: any): UseAuthReturn => {\n  const { getToken: getTokenBase, ...rest } = useAuthBase(initialAuthState);\n\n  const getToken: GetToken = (opts?: GetTokenOptions): Promise<string | null> =>\n    getTokenBase(opts)\n      .then(token => {\n        if (!opts && SessionJWTCache.checkInit()) {\n          if (token) {\n            void SessionJWTCache.save(token);\n          } else {\n            void SessionJWTCache.remove();\n          }\n        }\n        return token;\n      })\n      .catch(error => {\n        if (!opts && SessionJWTCache.checkInit() && isNetworkError(error)) {\n          return SessionJWTCache.load();\n        }\n        throw error;\n      });\n\n  return { ...rest, getToken };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAuC;AACvC,mBAA+B;AAG/B,mBAAgC;AAMzB,MAAM,UAAU,CAAC,qBAA0C;AAChE,QAAM,EAAE,UAAU,cAAc,GAAG,KAAK,QAAI,mBAAAA,SAAY,gBAAgB;AAExE,QAAM,WAAqB,CAAC,SAC1B,aAAa,IAAI,EACd,KAAK,WAAS;AACb,QAAI,CAAC,QAAQ,6BAAgB,UAAU,GAAG;AACxC,UAAI,OAAO;AACT,aAAK,6BAAgB,KAAK,KAAK;AAAA,MACjC,OAAO;AACL,aAAK,6BAAgB,OAAO;AAAA,MAC9B;AAAA,IACF;AACA,WAAO;AAAA,EACT,CAAC,EACA,MAAM,WAAS;AACd,QAAI,CAAC,QAAQ,6BAAgB,UAAU,SAAK,6BAAe,KAAK,GAAG;AACjE,aAAO,6BAAgB,KAAK;AAAA,IAC9B;AACA,UAAM;AAAA,EACR,CAAC;AAEL,SAAO,EAAE,GAAG,MAAM,SAAS;AAC7B;","names":["useAuthBase"]}