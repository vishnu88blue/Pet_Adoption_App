"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var secure_store_exports = {};
__export(secure_store_exports, {
  createSecureStore: () => createSecureStore
});
module.exports = __toCommonJS(secure_store_exports);
var SecureStore = __toESM(require("expo-secure-store"));
const CLERK_DEFAULT_CHUNK_SIZE = 1024;
const createSecureStore = () => {
  let queue = [];
  let isProcessing = false;
  const setItem = SecureStore.setItemAsync;
  const getItem = SecureStore.getItemAsync;
  const deleteItem = SecureStore.deleteItemAsync;
  const set = (key, value) => {
    queue.push({ key, value });
    void processQueue();
    return Promise.resolve();
  };
  const processQueue = async () => {
    if (isProcessing || queue.length === 0) {
      return;
    }
    isProcessing = true;
    const item = queue.pop();
    if (!item) {
      isProcessing = false;
      return;
    }
    queue = [];
    try {
      const latestKey = `${item.key}-latest`;
      const latestSlot = await getItem(latestKey) || "A";
      const targetSlot = latestSlot === "A" ? "B" : "A";
      await performSet(item.key, item.value, targetSlot);
      await setItem(latestKey, targetSlot);
      isProcessing = false;
    } catch (err) {
      isProcessing = false;
      throw err;
    } finally {
      void processQueue();
    }
  };
  const performSet = async (key, value, slot) => {
    const slotKey = `${key}-${slot}`;
    const chunks = splitIntoChunks(value);
    const metadataKey = `${slotKey}-metadata`;
    await setItem(`${slotKey}-complete`, "false");
    for (let i = 0; i < chunks.length; i++) {
      const chunkKey = `${slotKey}-chunk-${i}`;
      await setItem(chunkKey, chunks[i]);
    }
    const oldMetadataString = await getItem(metadataKey);
    if (oldMetadataString) {
      const oldMetadata = JSON.parse(oldMetadataString);
      for (let i = chunks.length; i < oldMetadata.totalChunks; i++) {
        const chunkKey = `${slotKey}-chunk-${i}`;
        await deleteItem(chunkKey);
      }
    }
    const metadata = { totalChunks: chunks.length };
    await setItem(metadataKey, JSON.stringify(metadata));
    await setItem(`${slotKey}-complete`, "true");
  };
  const get = async (key) => {
    const latestKey = `${key}-latest`;
    const latestSlot = await getItem(latestKey) || "A";
    const latestValue = await getSlot(`${key}-${latestSlot}`);
    if (latestValue !== null) {
      return latestValue;
    }
    const fallbackSlot = latestSlot === "A" ? "B" : "A";
    return await getSlot(`${key}-${fallbackSlot}`);
  };
  const getSlot = async (slotKey) => {
    const metadataKey = `${slotKey}-metadata`;
    const isComplete = await getItem(`${slotKey}-complete`);
    if (isComplete !== "true") {
      return null;
    }
    const metadataString = await getItem(metadataKey);
    if (!metadataString) {
      return null;
    }
    const metadata = JSON.parse(metadataString);
    if (!metadata) {
      return null;
    }
    const chunks = [];
    for (let i = 0; i < metadata.totalChunks; i++) {
      const chunkKey = `${slotKey}-chunk-${i}`;
      const chunk = await getItem(chunkKey);
      if (!chunk) {
        return null;
      }
      chunks.push(chunk);
    }
    return chunks.join("");
  };
  return {
    set,
    get
  };
};
const splitIntoChunks = (value, chunkSize = CLERK_DEFAULT_CHUNK_SIZE) => {
  const characters = Array.from(value);
  const chunks = [];
  for (let i = 0; i < characters.length; i += chunkSize) {
    chunks.push(characters.slice(i, i + chunkSize).join(""));
  }
  return chunks;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createSecureStore
});
//# sourceMappingURL=secure-store.js.map