{"version":3,"sources":["../../src/provider/ClerkProvider.tsx"],"sourcesContent":["import '../polyfills';\n\nimport { ClerkProvider as ClerkReactProvider } from '@clerk/clerk-react';\nimport * as WebBrowser from 'expo-web-browser';\n\nimport type { TokenCache } from '../cache/types';\nimport { isNative, isWeb } from '../utils/runtime';\nimport { getClerkInstance } from './singleton';\nimport type { BuildClerkOptions } from './singleton/types';\n\nexport type ClerkProviderProps = React.ComponentProps<typeof ClerkReactProvider> & {\n  /**\n   * The token cache is used to persist the active user's session token. Clerk stores this token in memory by default, however it is recommended to use a token cache for production applications.\n   * @see https://clerk.com/docs/quickstarts/expo#configure-the-token-cache-with-expo\n   */\n  tokenCache?: TokenCache;\n  /**\n   * Note: Passkey support in Expo is currently in a limited rollout phase.\n   * If you're interested in using this feature, please contact us for early access or additional details.\n   *\n   * @experimental This API is experimental and may change at any moment.\n   */\n  __experimental_passkeys?: BuildClerkOptions['__experimental_passkeys'];\n  /**\n   * This cache is used to store the resources that Clerk fetches from the server when the network is offline.\n   *\n   * @experimental This API is experimental and may change at any moment.\n   */\n  __experimental_resourceCache?: BuildClerkOptions['__experimental_resourceCache'];\n};\n\nconst SDK_METADATA = {\n  name: PACKAGE_NAME,\n  version: PACKAGE_VERSION,\n};\n\nexport function ClerkProvider(props: ClerkProviderProps): JSX.Element {\n  const {\n    children,\n    tokenCache,\n    publishableKey,\n    __experimental_passkeys,\n    experimental,\n    __experimental_resourceCache,\n    ...rest\n  } = props;\n  const pk = publishableKey || process.env.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY || process.env.CLERK_PUBLISHABLE_KEY || '';\n\n  if (isWeb()) {\n    // This is needed in order for useOAuth to work correctly on web.\n    WebBrowser.maybeCompleteAuthSession();\n  }\n\n  return (\n    <ClerkReactProvider\n      // Force reset the state when the provided key changes, this ensures that the provider does not retain stale state.\n      // See JS-598 for additional context.\n      key={pk}\n      {...rest}\n      publishableKey={pk}\n      sdkMetadata={SDK_METADATA}\n      Clerk={\n        isNative()\n          ? getClerkInstance({\n              publishableKey: pk,\n              tokenCache,\n              __experimental_passkeys,\n              __experimental_resourceCache,\n            })\n          : null\n      }\n      standardBrowser={!isNative()}\n      experimental={{\n        ...experimental,\n        // force the rethrowOfflineNetworkErrors flag to true if the asyncStorage is provided\n        rethrowOfflineNetworkErrors: !!__experimental_resourceCache || experimental?.rethrowOfflineNetworkErrors,\n      }}\n    >\n      {children}\n    </ClerkReactProvider>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAsDI;AAtDJ,uBAAO;AAEP,yBAAoD;AACpD,iBAA4B;AAG5B,qBAAgC;AAChC,uBAAiC;AAwBjC,MAAM,eAAe;AAAA,EACnB,MAAM;AAAA,EACN,SAAS;AACX;AAEO,SAAS,cAAc,OAAwC;AACpE,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EACL,IAAI;AACJ,QAAM,KAAK,kBAAkB,QAAQ,IAAI,qCAAqC,QAAQ,IAAI,yBAAyB;AAEnH,UAAI,sBAAM,GAAG;AAEX,eAAW,yBAAyB;AAAA,EACtC;AAEA,SACE;AAAA,IAAC,mBAAAA;AAAA,IAAA;AAAA,MAIE,GAAG;AAAA,MACJ,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,WACE,yBAAS,QACL,mCAAiB;AAAA,QACf,gBAAgB;AAAA,QAChB;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC,IACD;AAAA,MAEN,iBAAiB,KAAC,yBAAS;AAAA,MAC3B,cAAc;AAAA,QACZ,GAAG;AAAA;AAAA,QAEH,6BAA6B,CAAC,CAAC,iCAAgC,6CAAc;AAAA,MAC/E;AAAA,MAEC;AAAA;AAAA,IArBI;AAAA,EAsBP;AAEJ;","names":["ClerkReactProvider"]}