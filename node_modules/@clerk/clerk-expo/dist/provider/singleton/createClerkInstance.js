"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var createClerkInstance_exports = {};
__export(createClerkInstance_exports, {
  clerk: () => clerk,
  createClerkInstance: () => createClerkInstance
});
module.exports = __toCommonJS(createClerkInstance_exports);
var import_headless = require("@clerk/clerk-js/headless");
var import_error = require("@clerk/shared/error");
var import_react_native = require("react-native");
var import_cache = require("../../cache");
var import_MemoryTokenCache = require("../../cache/MemoryTokenCache");
var import_errorThrower = require("../../errorThrower");
var import_utils = require("../../utils");
const KEY = "__clerk_client_jwt";
let clerk;
let __internal_clerk;
function createClerkInstance(ClerkClass) {
  return (options) => {
    var _a;
    const {
      publishableKey = process.env.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY || process.env.CLERK_PUBLISHABLE_KEY || "",
      tokenCache = import_MemoryTokenCache.MemoryTokenCache,
      __experimental_resourceCache: createResourceCache
    } = options || {};
    if (!__internal_clerk && !publishableKey) {
      import_errorThrower.errorThrower.throwMissingPublishableKeyError();
    }
    const hasKeyChanged = __internal_clerk && !!publishableKey && publishableKey !== __internal_clerk.publishableKey;
    if (!__internal_clerk || hasKeyChanged) {
      if (hasKeyChanged) {
        (_a = tokenCache.clearToken) == null ? void 0 : _a.call(tokenCache, KEY);
      }
      const getToken = tokenCache.getToken;
      const saveToken = tokenCache.saveToken;
      __internal_clerk = clerk = new ClerkClass(publishableKey);
      if (import_react_native.Platform.OS === "ios" || import_react_native.Platform.OS === "android") {
        __internal_clerk.__internal_createPublicCredentials = (publicKeyCredential) => {
          var _a2, _b;
          return ((_a2 = options == null ? void 0 : options.__experimental_passkeys) == null ? void 0 : _a2.create) ? (_b = options == null ? void 0 : options.__experimental_passkeys) == null ? void 0 : _b.create(publicKeyCredential) : import_errorThrower.errorThrower.throw("create() for passkeys is missing");
        };
        __internal_clerk.__internal_getPublicCredentials = ({
          publicKeyOptions
        }) => {
          var _a2, _b;
          return ((_a2 = options == null ? void 0 : options.__experimental_passkeys) == null ? void 0 : _a2.get) ? (_b = options == null ? void 0 : options.__experimental_passkeys) == null ? void 0 : _b.get({ publicKeyOptions }) : import_errorThrower.errorThrower.throw("get() for passkeys is missing");
        };
        __internal_clerk.__internal_isWebAuthnSupported = () => {
          var _a2, _b;
          return ((_a2 = options == null ? void 0 : options.__experimental_passkeys) == null ? void 0 : _a2.isSupported) ? (_b = options == null ? void 0 : options.__experimental_passkeys) == null ? void 0 : _b.isSupported() : import_errorThrower.errorThrower.throw("isSupported() for passkeys is missing");
        };
        __internal_clerk.__internal_isWebAuthnAutofillSupported = () => {
          var _a2, _b;
          return ((_a2 = options == null ? void 0 : options.__experimental_passkeys) == null ? void 0 : _a2.isAutoFillSupported) ? (_b = options == null ? void 0 : options.__experimental_passkeys) == null ? void 0 : _b.isAutoFillSupported() : import_errorThrower.errorThrower.throw("isSupported() for passkeys is missing");
        };
        __internal_clerk.__internal_isWebAuthnPlatformAuthenticatorSupported = () => {
          return Promise.resolve(true);
        };
        if (createResourceCache) {
          const retryInitilizeResourcesFromFAPI = async () => {
            const isClerkNetworkError = (err) => (0, import_headless.isClerkRuntimeError)(err) && err.code === "network_error";
            try {
              await (__internal_clerk == null ? void 0 : __internal_clerk.__internal_reloadInitialResources());
            } catch (err) {
              if (isClerkNetworkError(err) || !(0, import_error.is4xxError)(err)) {
                const timeout = isClerkNetworkError(err) ? 2e3 : 1e4;
                setTimeout(() => void retryInitilizeResourcesFromFAPI(), timeout);
              }
            }
          };
          import_cache.EnvironmentResourceCache.init({ publishableKey, storage: createResourceCache });
          import_cache.ClientResourceCache.init({ publishableKey, storage: createResourceCache });
          import_cache.SessionJWTCache.init({ publishableKey, storage: createResourceCache });
          __internal_clerk.addListener(({ client }) => {
            var _a2;
            const environment = __internal_clerk == null ? void 0 : __internal_clerk.__unstable__environment;
            if (environment) {
              void import_cache.EnvironmentResourceCache.save(environment.__internal_toSnapshot());
            }
            if (client) {
              void import_cache.ClientResourceCache.save(client.__internal_toSnapshot());
              if (client.lastActiveSessionId) {
                const lastActiveSession = client.activeSessions.find((s) => s.id === client.lastActiveSessionId);
                const token = (_a2 = lastActiveSession == null ? void 0 : lastActiveSession.lastActiveToken) == null ? void 0 : _a2.getRawString();
                if (token) {
                  void import_cache.SessionJWTCache.save(token);
                }
              } else {
                void import_cache.SessionJWTCache.remove();
              }
            }
          });
          __internal_clerk.__internal_getCachedResources = async () => {
            let environment = await import_cache.EnvironmentResourceCache.load();
            let client = await import_cache.ClientResourceCache.load();
            if (!environment || !client) {
              environment = import_cache.DUMMY_CLERK_ENVIRONMENT_RESOURCE;
              client = import_cache.DUMMY_CLERK_CLIENT_RESOURCE;
              setTimeout(() => void retryInitilizeResourcesFromFAPI(), 3e3);
            }
            return { client, environment };
          };
        }
      }
      __internal_clerk.__unstable__onBeforeRequest(async (requestInit) => {
        var _a2;
        requestInit.credentials = "omit";
        (_a2 = requestInit.url) == null ? void 0 : _a2.searchParams.append("_is_native", "1");
        const jwt = await getToken(KEY);
        requestInit.headers.set("authorization", jwt || "");
        if ((0, import_utils.isNative)()) {
          requestInit.headers.set("x-mobile", "1");
        }
      });
      __internal_clerk.__unstable__onAfterResponse(async (_, response) => {
        const authHeader = response.headers.get("authorization");
        if (authHeader) {
          await saveToken(KEY, authHeader);
        }
      });
    }
    return __internal_clerk;
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  clerk,
  createClerkInstance
});
//# sourceMappingURL=createClerkInstance.js.map