{"version":3,"sources":["../../../src/provider/singleton/createClerkInstance.ts"],"sourcesContent":["import type { FapiRequestInit, FapiResponse } from '@clerk/clerk-js/dist/types/core/fapiClient';\nimport { type Clerk, isClerkRuntimeError } from '@clerk/clerk-js/headless';\nimport type { BrowserClerk, HeadlessBrowserClerk } from '@clerk/clerk-react';\nimport { is4xxError } from '@clerk/shared/error';\nimport type {\n  ClientJSONSnapshot,\n  EnvironmentJSONSnapshot,\n  PublicKeyCredentialCreationOptionsWithoutExtensions,\n  PublicKeyCredentialRequestOptionsWithoutExtensions,\n} from '@clerk/types';\nimport { Platform } from 'react-native';\n\nimport {\n  ClientResourceCache,\n  DUMMY_CLERK_CLIENT_RESOURCE,\n  DUMMY_CLERK_ENVIRONMENT_RESOURCE,\n  EnvironmentResourceCache,\n  SessionJWTCache,\n} from '../../cache';\nimport { MemoryTokenCache } from '../../cache/MemoryTokenCache';\nimport { errorThrower } from '../../errorThrower';\nimport { isNative } from '../../utils';\nimport type { BuildClerkOptions } from './types';\n\nconst KEY = '__clerk_client_jwt';\n\n/**\n * @deprecated Use `getClerkInstance` instead. `Clerk` will be removed in the next major version.\n */\nexport let clerk: HeadlessBrowserClerk | BrowserClerk;\nlet __internal_clerk: HeadlessBrowserClerk | BrowserClerk | undefined;\n\nexport function createClerkInstance(ClerkClass: typeof Clerk) {\n  return (options?: BuildClerkOptions): HeadlessBrowserClerk | BrowserClerk => {\n    const {\n      publishableKey = process.env.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY || process.env.CLERK_PUBLISHABLE_KEY || '',\n      tokenCache = MemoryTokenCache,\n      __experimental_resourceCache: createResourceCache,\n    } = options || {};\n\n    if (!__internal_clerk && !publishableKey) {\n      errorThrower.throwMissingPublishableKeyError();\n    }\n\n    // Support \"hot-swapping\" the Clerk instance at runtime. See JS-598 for additional details.\n    const hasKeyChanged = __internal_clerk && !!publishableKey && publishableKey !== __internal_clerk.publishableKey;\n\n    if (!__internal_clerk || hasKeyChanged) {\n      if (hasKeyChanged) {\n        tokenCache.clearToken?.(KEY);\n      }\n\n      const getToken = tokenCache.getToken;\n      const saveToken = tokenCache.saveToken;\n      __internal_clerk = clerk = new ClerkClass(publishableKey);\n\n      if (Platform.OS === 'ios' || Platform.OS === 'android') {\n        // @ts-expect-error - This is an internal API\n        __internal_clerk.__internal_createPublicCredentials = (\n          publicKeyCredential: PublicKeyCredentialCreationOptionsWithoutExtensions,\n        ) => {\n          return options?.__experimental_passkeys?.create\n            ? options?.__experimental_passkeys?.create(publicKeyCredential)\n            : errorThrower.throw('create() for passkeys is missing');\n        };\n\n        // @ts-expect-error - This is an internal API\n        __internal_clerk.__internal_getPublicCredentials = ({\n          publicKeyOptions,\n        }: {\n          publicKeyOptions: PublicKeyCredentialRequestOptionsWithoutExtensions;\n        }) => {\n          return options?.__experimental_passkeys?.get\n            ? options?.__experimental_passkeys?.get({ publicKeyOptions })\n            : errorThrower.throw('get() for passkeys is missing');\n        };\n        // @ts-expect-error - This is an internal API\n        __internal_clerk.__internal_isWebAuthnSupported = () => {\n          return options?.__experimental_passkeys?.isSupported\n            ? options?.__experimental_passkeys?.isSupported()\n            : errorThrower.throw('isSupported() for passkeys is missing');\n        };\n\n        // @ts-expect-error - This is an internal API\n        __internal_clerk.__internal_isWebAuthnAutofillSupported = () => {\n          return options?.__experimental_passkeys?.isAutoFillSupported\n            ? options?.__experimental_passkeys?.isAutoFillSupported()\n            : errorThrower.throw('isSupported() for passkeys is missing');\n        };\n\n        // @ts-expect-error - This is an internal API\n        __internal_clerk.__internal_isWebAuthnPlatformAuthenticatorSupported = () => {\n          return Promise.resolve(true);\n        };\n\n        if (createResourceCache) {\n          const retryInitilizeResourcesFromFAPI = async () => {\n            const isClerkNetworkError = (err: unknown) => isClerkRuntimeError(err) && err.code === 'network_error';\n            try {\n              await __internal_clerk?.__internal_reloadInitialResources();\n            } catch (err) {\n              // Retry after 3 seconds if the error is a network error or a 5xx error\n              if (isClerkNetworkError(err) || !is4xxError(err)) {\n                // Retry after 2 seconds if the error is a network error\n                // Retry after 10 seconds if the error is a 5xx FAPI error\n                const timeout = isClerkNetworkError(err) ? 2000 : 10000;\n                setTimeout(() => void retryInitilizeResourcesFromFAPI(), timeout);\n              }\n            }\n          };\n\n          EnvironmentResourceCache.init({ publishableKey, storage: createResourceCache });\n          ClientResourceCache.init({ publishableKey, storage: createResourceCache });\n          SessionJWTCache.init({ publishableKey, storage: createResourceCache });\n\n          __internal_clerk.addListener(({ client }) => {\n            // @ts-expect-error - This is an internal API\n            const environment = __internal_clerk?.__unstable__environment as EnvironmentResource;\n            if (environment) {\n              void EnvironmentResourceCache.save(environment.__internal_toSnapshot());\n            }\n\n            if (client) {\n              void ClientResourceCache.save(client.__internal_toSnapshot());\n              if (client.lastActiveSessionId) {\n                const lastActiveSession = client.activeSessions.find(s => s.id === client.lastActiveSessionId);\n                const token = lastActiveSession?.lastActiveToken?.getRawString();\n                if (token) {\n                  void SessionJWTCache.save(token);\n                }\n              } else {\n                void SessionJWTCache.remove();\n              }\n            }\n          });\n\n          __internal_clerk.__internal_getCachedResources = async (): Promise<{\n            client: ClientJSONSnapshot | null;\n            environment: EnvironmentJSONSnapshot | null;\n          }> => {\n            let environment = await EnvironmentResourceCache.load();\n            let client = await ClientResourceCache.load();\n            if (!environment || !client) {\n              environment = DUMMY_CLERK_ENVIRONMENT_RESOURCE;\n              client = DUMMY_CLERK_CLIENT_RESOURCE;\n              setTimeout(() => void retryInitilizeResourcesFromFAPI(), 3000);\n            }\n            return { client, environment };\n          };\n        }\n      }\n\n      // @ts-expect-error - This is an internal API\n      __internal_clerk.__unstable__onBeforeRequest(async (requestInit: FapiRequestInit) => {\n        // https://reactnative.dev/docs/0.61/network#known-issues-with-fetch-and-cookie-based-authentication\n        requestInit.credentials = 'omit';\n\n        // Instructs the backend to parse the api token from the Authorization header.\n        requestInit.url?.searchParams.append('_is_native', '1');\n\n        const jwt = await getToken(KEY);\n        (requestInit.headers as Headers).set('authorization', jwt || '');\n\n        // Instructs the backend that the request is from a mobile device.\n        // Some iOS devices have an empty user-agent, so we can't rely on that.\n        if (isNative()) {\n          (requestInit.headers as Headers).set('x-mobile', '1');\n        }\n      });\n\n      // @ts-expect-error - This is an internal API\n      __internal_clerk.__unstable__onAfterResponse(async (_: FapiRequestInit, response: FapiResponse<unknown>) => {\n        const authHeader = response.headers.get('authorization');\n        if (authHeader) {\n          await saveToken(KEY, authHeader);\n        }\n      });\n    }\n    return __internal_clerk;\n  };\n}\n"],"mappings":"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","names":["_a"]}