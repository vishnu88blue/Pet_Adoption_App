"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ResourceCache_exports = {};
__export(ResourceCache_exports, {
  ClientResourceCache: () => ClientResourceCache,
  EnvironmentResourceCache: () => EnvironmentResourceCache,
  SessionJWTCache: () => SessionJWTCache
});
module.exports = __toCommonJS(ResourceCache_exports);
function createResourceCache(key) {
  if (!key) {
    throw new Error("Clerk: ResourceCache key is required!");
  }
  let storage = null;
  let itemKey = null;
  const init = (opts) => {
    if (!opts.storage || !opts.publishableKey) {
      throw new Error(`Clerk: ResourceCache for ${key} requires storage and publishableKey!`);
    }
    itemKey = `${key}_${opts.publishableKey.slice(-5)}`;
    storage = opts.storage();
  };
  const checkInit = () => {
    return !!storage && !!itemKey;
  };
  const assertInitiliazed = () => {
    if (!storage || !itemKey) {
      throw new Error(`Clerk: ResourceCache for ${key} not initialized!`);
    }
  };
  const load = async () => {
    assertInitiliazed();
    try {
      const value = await storage.get(itemKey);
      return value ? JSON.parse(value) : null;
    } catch (error) {
      console.log(`Clerk: Error loading value on ${key} from storage:`, error);
      return null;
    }
  };
  const save = async (value) => {
    assertInitiliazed();
    try {
      return await storage.set(itemKey, JSON.stringify(value));
    } catch (error) {
      console.log(`Clerk: Error saving value on ${key} in storage:`, error);
    }
  };
  const remove = async () => {
    assertInitiliazed();
    try {
      return await storage.set(itemKey, "");
    } catch (error) {
      console.log(`Clerk: Error deleting value on ${key} from storage:`, error);
    }
  };
  return { checkInit, init, load, save, remove };
}
const EnvironmentResourceCache = createResourceCache("__clerk_cache_environment");
const ClientResourceCache = createResourceCache("__clerk_cache_client");
const SessionJWTCache = createResourceCache("__clerk_cache_session_jwt");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ClientResourceCache,
  EnvironmentResourceCache,
  SessionJWTCache
});
//# sourceMappingURL=ResourceCache.js.map